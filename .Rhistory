data = read.csv("C:\\DataScience\\DataFiles\\Future500\\Future-500.csv")
str(data)
is.data.frame(data)
data$Inception = factor(data$Inception)
str(data)
data$ID = factor(data$ID)
str(data)
# Factor trap
data$Growth
g <- data$Growth
g <- data$Growth
g = gsub("%","",g)
print(g)
typeof(g)
str(data)
g -> data$Growth
str(data)
g = as.numeric(g)
g -> data$Growth
str(data)
source('C:/DataScience/R/WeatherData.R')
source('C:/DataScience/R/WeatherData.R')
wd+"Chicago-F.csv"
source('C:/DataScience/R/WeatherData.R')
wd+"Chicago-F.csv"
wd <- "C:\\DataScience\\DataFiles\\Weather-Data\\Weather Data\\"
wd+"Chicago-F.csv"
typeof(wd)
wd + "Chicago-F.csv"
paste(wd,"Chicago-F.csv",sep = " " )
paste(wd,"Chicago-F.csv")
paste(wd,"Chicago-F.csv", collapse ="" )
paste(wd,"Chicago-F.csv", sep='' )
source('C:/DataScience/R/WeatherData.R')
Chicago
Chicago <- read.csv(wd, row.names = 1)
Chicago
paste(wd,"Chicago-F.csv", sep='' )
source('C:/DataScience/R/WeatherData.R')
SanFransisco
typeof(SanFransisco)
is.data.frame(SanFransisco)
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFransisco <- as.matrix(SanFransisco)
Chicago[3]
Chicago[[3]]
source('C:/DataScience/R/WeatherData.R')
typeof(Weathe[3])
typeof(Weathe[[3]])
Weathe[[3]]
rowMeans(Chicago)
lapply(Chicago, rowMeans)
lapply(Weathe, rowMeans)
lapply(Weathe, "[",3,)
lapply(Weathe, "[",,3)
M1 <- rbind(c(100,200,300,400,500), rep(10,5))
M2 <- rbind(1:5, rep(10,5))
MyAwesomeList <- list(M1, M2)
MyAwesomeList
sw = sapply(MyAwesomeList, function(x) x[1,]/x[2,])
sw
typeof(sw)
is.matrix(sw)
sw = lapply(MyAwesomeList, function(x) x[1,]/x[2,])
sw
is.matrix(sw)
source('C:/DataScience/R/WeatherData.R')
setwd("C:/DataScience/ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Simple_Linear_Regression")
setwd("~")
path.expand("~")
getwd()
setwd("~/")
load("~/.RData")
source('C:/DataScience/ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/data_preprocessing_template.R', encoding = 'UTF-8')
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
#check dimesions ( number of row & columns) in data sets
dim(train)
dim(test)
#check the variables and their types in train
str(train)
# brief summary of train
summary(train)
##############################################
#
# a first look at the data and
# cleaning of it
#
##############################################
# to simplify that task we'll (temporarily) vertically combine
# the train and test dataframes
# In order to do that we have to add the missing column to
# the test dataframe and fill it with 2 as a dummy variable
test$stroke <-  2
combi <- rbind(train, test)
##########################################
#
# Taking care of missing values
#
##########################################
na_count <-sapply(combi, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count
# the different levels factored vareiables
levels(combi$smoking_status)
levels(combi$gender)
levels(combi$ever_married)
levels(combi$work_type)
##############################################
#
# Also, some entries for smoking_stat are empty
# let's temporarily call them "NoData"
#
##############################################
levels(combi$smoking_status)[1] <- "NoData"
str(combi)
#median imputaion for bmi
med = median(combi$bmi,na.rm = TRUE)
combi[is.na(combi$bmi), "bmi"] = med
# Encoding the categorical variables as factors
combi$gender = as.numeric(factor(combi$gender,
levels = c('Female', 'Male', 'Other'),
labels = c(1, 2, 3)))
combi$ever_married = as.numeric(factor(combi$ever_married,
levels = c('No', 'Yes'),
labels = c(1, 2)))
combi$work_type = as.numeric(factor(combi$work_type,
levels = c('children', 'Govt_job', 'Never_worked', 'Private', 'Self-employed'),
labels = c(1, 2, 3, 4, 5)))
combi$Residence_type = as.numeric(factor(combi$Residence_type,
levels = c('Rural', 'Urban'),
labels = c(1, 2)))
combi$smoking_status = as.numeric(factor(combi$smoking_status,
levels = c('NoData', 'formerly smoked', 'never smoked', 'smokes'),
labels = c(1, 2, 3, 4)))
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
print (n1)
erer er
foo()
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
n1<-as.integer(n1)
n2<-as.integer(n2)
c(n1, n2)
}
foo()
23232
23234654656
n1<-readline(prompt="Enter skip 1: " )
print (n)
print (n1)
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
n1<-as.integer(n1)
n2<-as.integer(n2)
c(n1, n2)
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
n1<-as.integer(n1)
n2<-as.integer(n2)
c(n1, n2)
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
c(n1, n2)
}
foo()
typeof(n1)
k = as.numeric(n1)
print(k)
c(n1, n2)
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
c(n1, n2)
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
c(n1, n2)
}
foo()
k = as.numeric(n1)
print(k)
prompt <- "enter the experiment numbers (space-separated list) \n"
EXP <- as.integer(strsplit(readline(prompt), " ")[[1]])
print(EXP)
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
c(n1, n2)
}
print(typeof(EXP)
prompt <- "enter the experiment numbers (space-separated list) \n"
EXP <- as.integer(strsplit(readline(prompt), " ")[[1]])
print(typeof(EXP)
print(typeof(EXP))
print(typeof(EXP))
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(readline(prompt), " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(readline(prompt), " ")[[1]])
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(readline(n1), " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(readline(n2), " ")[[1]])
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j <- c(n1,n2)
print(j)
}
foo()
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
j <- c(n1,n2)
print(j)
n1<-readline(prompt="Enter skip 1: " )
n2<-readline(prompt="Enter skip 2: " )
j <- c(n1,n2)
print(j)
4 5 6
joo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j <- c(n1,n2)
print(j)
joo()
}
foo()
print(j)
}
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j <- c(n1,n2)
print(j)
joo()
}
foo()
print(j)
}
my.name <- readline(prompt="Enter name: ")
# convert character into integer
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
my.name <- readline(prompt="Enter name: ")
my.age <- readline(prompt="Enter age: ")
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j <- c(n1,n2)
print(j)
joo()
}
foo()
3
3 4
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j <- c(n1,n2)
print(j)
joo()
}
foo()
print("Hi")
}
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
print(j)
}
foo()
}
print(foo)
print(foo)
6 7
print(j)
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
print(j)
joo <- function()
{
print("hello")
}
joo()
}
foo()
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
print(j)
joo <- function()
{
print("hello")
}
joo()
}
foo()
foo()
j<- c(n1,n2)
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
print(j)
joo <- function()
{
for(i in 1:2 )
{
foo()
}
}
joo()
}
foo()
for(i in 1:2 )
{
foo()
}
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
print(j)
joo <- function()
{
print("Hello")
}
joo()
}
foo <- function(){
n1<-readline(prompt="Enter skip 1: " )
EXP_n1 <- as.integer(strsplit(n1, " ")[[1]])
n2<-readline(prompt="Enter skip 2: " )
EXP_n2 <- as.integer(strsplit(n2, " ")[[1]])
j<- c(n1,n2)
print(j)
joo <- function()
{
print("Hello")
}
joo()
}
for(i in 1:2 )
{
foo()
}
#print(j)
return(j)
prompt <- "enter the experiment numbers (space-separated list) \n"
EXP <- as.integer(strsplit(readline(prompt), "\n")[[1]])
prompt <- "enter the experiment numbers (space-separated list) \n"
EXP <- as.integer(strsplit(readline(prompt), "\n")[[1]])
